

USE GD2C2024
GO


------------ Eliminación de funciones    ------------------

IF OBJECT_ID('REINUS.CALCULAR_TURNO') IS NOT NULL
DROP FUNCTION REINUS.CALCULAR_TURNO

IF OBJECT_ID('REINUS.CALCULAR_HORARIO') IS NOT NULL
DROP FUNCTION REINUS.CALCULAR_HORARIO
GO
IF OBJECT_ID('REINUS.CALCULAR_RANGO_ETARIO') IS NOT NULL
DROP FUNCTION REINUS.CALCULAR_RANGO_ETARIO
GO
IF OBJECT_ID('REINUS.CALCULAR_FECHA') IS NOT NULL
DROP FUNCTION REINUS.CALCULAR_FECHA
GO



------------ Eliminación de procedures    ------------------

IF OBJECT_ID('REINUS.BI_MIGRAR_RANGO_ETARIO','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_RANGO_ETARIO

IF OBJECT_ID('REINUS.BI_MIGRAR_TURNOS','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_TURNOS

IF OBJECT_ID('REINUS.BI_MIGRAR_UBICACION','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_UBICACION

IF OBJECT_ID('REINUS.BI_MIGRAR_SUCURSAL','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_SUCURSAL

IF OBJECT_ID('REINUS.BI_MIGRAR_TIEMPO','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_TIEMPO


IF OBJECT_ID('REINUS.BI_MIGRAR_VENTAS','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_VENTAS

IF OBJECT_ID('REINUS.BI_MIGRAR_MEDIO_PAGO','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_MEDIO_PAGO


IF OBJECT_ID('REINUS.BI_MIGRAR_H_VENTA','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_VENTA
GO

IF OBJECT_ID('REINUS.BI_MIGRAR_PAGO','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_PAGO
GO

IF OBJECT_ID('REINUS.BI_MIGRAR_ENVIOS','P') IS NOT NULL
DROP PROCEDURE  REINUS.BI_MIGRAR_ENVIO
GO

------------ Eliminación de views ------------------

IF OBJECT_ID('REINUS.VIEW_1','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_1
GO


IF OBJECT_ID('REINUS.VIEW_2','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_2
GO


IF OBJECT_ID('REINUS.VIEW_3','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_3
GO


IF OBJECT_ID('REINUS.VIEW_4','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_4
GO

IF OBJECT_ID('REINUS.VIEW_5','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_5
GO

IF OBJECT_ID('REINUS.VIEW_6','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_6
GO

IF OBJECT_ID('REINUS.VIEW_7','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_7
GO

IF OBJECT_ID('REINUS.VIEW_8','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_8
GO

IF OBJECT_ID('REINUS.VIEW_9','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_9
GO

IF OBJECT_ID('REINUS.VIEW_10','V') IS NOT NULL
DROP VIEW  REINUS.VIEW_10
GO

IF OBJECT_ID('REINUS.BI_TIEMPO','U') IS NOT NULL
    DROP TABLE REINUS.BI_TIEMPO;


IF OBJECT_ID('REINUS.BI_VENTAS','U') IS NOT NULL
    DROP TABLE REINUS.BI_VENTAS;

IF OBJECT_ID('REINUS.BI_MARCA','U') IS NOT NULL
    DROP TABLE REINUS.BI_MARCA;


IF OBJECT_ID('REINUS.BI_ENVIO','U') IS NOT NULL
    DROP TABLE REINUS.BI_ENVIO;

IF OBJECT_ID('REINUS.BI_TIPO_ENVIO','U') IS NOT NULL
    DROP TABLE REINUS.BI_TIPO_ENVIO

IF OBJECT_ID('REINUS.BI_RANGO_ETARIO','U') IS NOT NULL
    DROP TABLE REINUS.BI_RANGO_ETARIO;

IF OBJECT_ID('REINUS.BI_RANGO_HORARIO','U') IS NOT NULL
    DROP TABLE REINUS.BI_RANGO_HORARIO;

IF OBJECT_ID('REINUS.BI_UBICACION','U') IS NOT NULL
    DROP TABLE REINUS.BI_UBICACION;
GO
IF OBJECT_ID('REINUS.BI_MEDIO_PAGO','U') IS NOT NULL
    DROP TABLE REINUS.BI_MEDIO_PAGO;
	GO
IF OBJECT_ID('REINUS.BI_RUBRO','U') IS NOT NULL
    DROP TABLE REINUS.BI_RUBRO;
GO

IF OBJECT_ID('REINUS.BI_SUBRUBRO','U') IS NOT NULL
    DROP TABLE REINUS.BI_SUBRUBRO;

GO

---FALTA VENTA, 
CREATE TABLE REINUS.BI_VENTA(
ID_VENTA INTEGER IDENTITY(1,1) NOT NULL,
 VENTA_RANGO_HORARIO INT ,
 VENTA_TIPO_MEDIO_PAGO INT,
 VENTA_RANGO_ETARIO_CLIENTE INT,
 VENTA_UBICACION INT ,
 VENTA_TIEMPO INT ,
 VENTA_RUBRO INT,
 VENTA_SUBRUBRO INT,
 VENT_CANTIDAD_VENTAS       INT,
  VENT_MONTO    DECIMAL(18, 2)


)
CREATE TABLE REINUS.BI_PAGO(
  ID_PAGO INTEGER IDENTITY(1,1) NOT NULL,
  PAGO_UBICACION INTEGER,
  PAGO_TIEMPO INT,
  PAGO_TIPO_MEDIO_PAGO INT,
  PAGO_TOTAL    DECIMAL(18,2) NOT NULL,
  PAGO_CUOTAS   SMALLINT
)
CREATE TABLE REINUS.BI_PUBLICACION(
  ID_PUBLICACION INTEGER IDENTITY(1,1) NOT NULL,
  PUBLICACION_SUBRUBRO INT,
  PUBLICACION_RUBRO INT ,
  PUBLICACION_TIEMPO INT,
   FECHA_INICIO DATE,
    FECHA_FIN DATE,--Esto lo agrego Leo
    STOCK_INICIAL INTEGER

)
CREATE TABLE REINUS.BI_ENVIO(
ID_ENVIO INTEGER IDENTITY(1,1) NOT NULL,
ENVIO_UBICACION INT,
ENVIO_TIPO_ENVIO INT,
ENVIO_TIEMPO INT,
ENVIO_COSTO DECIMAL(18,2) NOT NULL,
ENTREGA  BIT(1)
)
CREATE TABLE REINUS.BI_FACTURA(
    ID_FACTURA INTEGER  IDENTITY(1,1) NOT NULL,
    FACTURA_TIEMPO          INT ,
    FACTURA_UBICACION INT ,
    CONCEPTO          INT,
	TOTAL_FACTURADO DECIMAL(18,2)
)
GO




----------------------------DIMENSIONES
CREATE TABLE REINUS.BI_MARCA (
    ID_MARCA INTEGER    IDENTITY(1,1) NOT NULL,
    DESCRIPCION NVARCHAR(50)
);
GO
CREATE TABLE REINUS.BI_RUBRO(
   ID_RUBRO INTEGER IDENTITY(1,1) NOT NULL,
PRODUCTO_RUBRO_DESCRIPCION  NVARCHAR(50)
)
GO

CREATE TABLE REINUS.BI_SUBRUBRO(
   ID_SUBRUBRO INTEGER IDENTITY(1,1) NOT NULL,
PRODUCTO_SUB_RUBRO NVARCHAR(50)
)
GO
CREATE TABLE REINUS.BI_TIEMPO(
    ID_TIEMPO INTEGER  IDENTITY(1,1) NOT NULL,
    TIEMPO_ANIO          SMALLINT ,
    TIEMPO_CUATRIMESTRE SMALLINT ,
    TIEMPO_MES          SMALLINT 
)
GO
CREATE TABLE REINUS.BI_TIPO_ENVIO
(
ID_TIPO_ENVIO INTEGER IDENTITY(1,1) NOT NULL,
TIPO NVARCHAR(50)
)
GO
CREATE TABLE REINUS.BI_TIPO_MEDIO_PAGO(
ID_TIPO_MEDIO_PAGO INTEGER IDENTITY(1,1) NOT NULL, 
MEDIO_PAGO NVARCHAR(50),
TIPO_MEDIO_PAGO NVARCHAR(50)

)
GO
CREATE TABLE REINUS.BI_RANGO_HORARIO(
ID_RANGO_HORARIO INTEGER IDENTITY(1,1) NOT NULL,
RANGO_HORARIO_DESCRIPCION NVARCHAR(50)
)
GO

CREATE TABLE REINUS.BI_RANGO_ETARIO(
ID_RANGO_ETARIO INTEGER IDENTITY(1,1) NOT NULL,
RANGO_ETARIO_DESCRIPCION NVARCHAR(50)
)
GO
CREATE TABLE REINUS.BI_UBICACION(
   ID_UBICACION             INTEGER IDENTITY(1,1) NOT NULL,
    UBICACION_PROVINCIA       NVARCHAR(50),
    UBICACION_LOCALIDAD       NVARCHAR(50)
)
GO
CREATE TABLE REINUS.BI_TIEMPO(
    ID_TIEMPO INTEGER  IDENTITY(1,1) NOT NULL,
    TIEMPO_ANIO          SMALLINT ,
    TIEMPO_CUATRIMESTRE SMALLINT ,
    TIEMPO_MES          SMALLINT 
)
GO
----------------------------------PRIMARY KEYS-----------------------------------------


ALTER TABLE REINUS.BI_RANGO_ETARIO
ADD CONSTRAINT PK_BI_RANGO_ETARIO PRIMARY KEY (ID_RANGO_ETARIO);

ALTER TABLE REINUS.BI_MARCA
ADD CONSTRAINT PK_BI_MARCA PRIMARY KEY (ID_MARCA);

ALTER TABLE REINUS.BI_RANGO_HORAIO
ADD CONSTRAINT PK_BI_RANGO_ETARIO PRIMARY KEY (ID_RANGO_HORARIO);
ALTER TABLE REINUS.BI_SUBRUBRO
ADD CONSTRAINT PK_BI_SUBRUBRO PRIMARY KEY (ID_SUBRUBRO);

ALTER TABLE REINUS.BI_RUBRO
ADD CONSTRAINT PK_BI_RUBRO PRIMARY KEY (ID_RUBRO);

ALTER TABLE REINUS.BI_UBICACION
ADD CONSTRAINT PK_BI_UBICACION PRIMARY KEY (ID_UBICACION);

ALTER TABLE REINUS.BI_TIEMPO
ADD CONSTRAINT PK_BI_TIEMPO PRIMARY KEY (ID_TIEMPO);

ALTER TABLE REINUS.BI_PUBLICACION
ADD CONSTRAINT PK_BI_PUBLICACION PRIMARY KEY (ID_PUBLICACION);

ALTER TABLE REINUS.BI_VENTA
ADD CONSTRAINT PK_BI_VENTA PRIMARY KEY (ID_VENTA);

ALTER TABLE REINUS.BI_FACTURA
ADD CONSTRAINT PK_BI_FACTURA PRIMARY KEY (ID_FACTURA);

ALTER TABLE REINUS.BI_ENVIOs
ADD CONSTRAINT PK_BI_ENVIO PRIMARY KEY (ID_ENVIO);

ALTER TABLE REINUS.BI_PAGO
ADD CONSTRAINT PK_BI_PAGO PRIMARY KEY (ID_PAGO);


ALTER TABLE REINUS.BI_TIPO_MEDIO_PAGO
ADD CONSTRAINT PK_BI_TIPO_MEDIO_PAGO PRIMARY KEY (ID_TIPO_PAGO);

ALTER TABLE REINUS.BI_TIPO_ENVIO
ADD CONSTRAINT PK_BI_TIPO_ENVIO PRIMARY KEY (ID_TIPO_ENVIO);

GO



------------------------FOREIGN KEYS
--------VENTA
ALTER TABLE REINUS.BI_VENTA
ADD CONSTRAINT FK_VENT_RANGO_ETARIO
FOREIGN KEY (VENTA_RANGO_ETARIO_CLIENTE) REFERENCES REINUS.BI_RANGO_ETARIO(ID_RANGO_ETARIO);

ALTER TABLE REINUS.BI_VENTA
ADD CONSTRAINT FK_VENT_RANGO_HORARIO
FOREIGN KEY (VENTA_RANGO_HORARIO) REFERENCES REINUS.BI_RANGO_HORARIO(ID_RANGO_HORARIO);

ALTER TABLE REINUS.BI_VENTA
ADD CONSTRAINT FK_VENTA_TIEMPO
FOREIGN KEY (VENTA_TIEMPO) REFERENCES REINUS.BI_TIEMPO(ID_TIEMPO);

ALTER TABLE REINUS.BI_VENTA
ADD CONSTRAINT FK_VENTA_TIPO_MEDIO_PAGO
FOREIGN KEY (VENTA_TIPO_MEDIO_PAGO) REFERENCES REINUS.BI_TIPO_MEDIO_PAGO(ID_TIEMPO_MEDIO_PAGO);

ALTER TABLE REINUS.BI_VENTA
ADD CONSTRAINT FK_VENTA_SUBRUBRO
FOREIGN KEY (VENTA_SUBRUBRO) REFERENCES REINUS.BI_SUBRUBRO(ID_SUBRUBRO);

ALTER TABLE REINUS.BI_VENTA
ADD CONSTRAINT FK_VENTA_RUBRO
FOREIGN KEY (VENTA_RUBRO) REFERENCES REINUS.BI_RUBRO(ID_RUBRO);
--------------PUBLICACION

ALTER TABLE REINUS.BI_PUBLICACION
ADD CONSTRAINT FK_PUBLICACION_SUBRUBRO
FOREIGN KEY (PUBLICACION_SUBRUBRO) REFERENCES REINUS.BI_SUBRUBRO(ID_SUBRUBRO);

ALTER TABLE REINUS.BI_PUBLICACION
ADD CONSTRAINT FK_PUBLICACION_RUBRO
FOREIGN KEY (PUBLICACION_RUBRO) REFERENCES REINUS.BI_RUBRO(ID_RUBRO);

ALTER TABLE REINUS.BI_PUBLICACION
ADD CONSTRAINT FK_PUBLICACION_TIEMPO
FOREIGN KEY (PUBLICACION_TIEMPO) REFERENCES REINUS.BI_TIEMPO(ID_TIEMPO);


-------ENVIO

ALTER TABLE REINUS.BI_ENVIO
ADD CONSTRAINT FK_ENVIO_TIEMPO
FOREIGN KEY (ENVIO_TIEMPO) REFERENCES REINUS.BI_TIEMPO(ID_TIEMPO);

ALTER TABLE REINUS.BI_ENVIO
ADD CONSTRAINT FK_ENVIO_TIPO_MEDIO_PAGO
FOREIGN KEY (ENVIO_TIPO_MEDIO_PAGO) REFERENCES REINUS.BI_TIPO_MEDIO_PAGO(ID_TIEMPO_MEDIO_PAGO);

ALTER TABLE REINUS.BI_ENVIO
ADD CONSTRAINT FK_ENVIO_TIPO_ENVIO
FOREIGN KEY (ENVIO_TIPO_ENVIO) REFERENCES REINUS.BI_TIPO_ENVIO(ID_TIPO_ENVIO);

ALTER TABLE REINUS.BI_ENVIO
ADD CONSTRAINT FK_ENVIO_UBICACION
FOREIGN KEY (ENVIO_UBICACION) REFERENCES REINUS.BI_UBICACION(ID_UBICACION);
------------------FACTURA

ALTER TABLE REINUS.BI_FACTURA
ADD CONSTRAINT FK_FACTURA_UBICACION
FOREIGN KEY (FACTURA_UBICACION) REFERENCES REINUS.BI_UBICACION(ID_UBICACION);

ALTER TABLE REINUS.BI_FACTURA
ADD CONSTRAINT FK_FACTURA_TIEMPO
FOREIGN KEY (FACTURA_TIEMPO) REFERENCES REINUS.BI_TIEMPO(ID_TIEMPO);
-----------------PAGO

ALTER TABLE REINUS.BI_PAGO
ADD CONSTRAINT FK_PAGO_UBICACION
FOREIGN KEY (PAGO_UBICACION) REFERENCES REINUS.BI_UBICACION(ID_UBICACION);

ALTER TABLE REINUS.BI_PAGO
ADD CONSTRAINT FK_PAGO_TIEMPO
FOREIGN KEY (PAGO) REFERENCES REINUS.BI_TIEMPO(ID_TIEMPO);

GO
----------------------------FUNCIONES --------------------------------

	CREATE FUNCTION REINUS.CALCULAR_RANGO_ETARIO (@FECHA_NACIMIENTO DATE)
RETURNS SMALLINT
AS
BEGIN
    DECLARE @ANIOS INT = DATEDIFF(YEAR, @FECHA_NACIMIENTO, GETDATE())
    DECLARE @RES SMALLINT
    IF @ANIOS < 25
        SET @RES = 1
    ELSE
        IF @ANIOS BETWEEN 25 AND 35
            SET @RES = 2
        ELSE
            IF @ANIOS BETWEEN 35 AND 50
                SET @RES = 3
            ELSE
                IF @ANIOS > 50
                    SET @RES = 4
                ELSE
                    SET @RES = 5
    RETURN @RES
END
GO
CREATE FUNCTION REINUS.CALCULAR_HORARIO (@HORARIO DATETIME)
RETURNS SMALLINT
AS
BEGIN
    DECLARE @HORA INT = DATEPART(HOUR, @HORARIO)
    DECLARE @RES SMALLINT
    IF @HORA BETWEEN 0 AND 6
            SET @RES = 1
        ELSE
            IF @HORA BETWEEN 6 AND 12
                SET @RES = 2
            ELSE IF  @HORA BETWEEN 12 AND 18
                SET @RES = 3
			ELSE
			SET @RES =4
				 

    RETURN @RES
END
GO

CREATE FUNCTION REINUS.CALCULAR_FECHA(@FECHA DATETIME)
RETURNS SMALLINT
AS
BEGIN
DECLARE @ANIO INT
DECLARE @CUATRIMESTRE INT
DECLARE @MES INT

SELECT @ANIO = YEAR(@FECHA), @CUATRIMESTRE = DATEPART(QUARTER,@FECHA), @MES = MONTH(@FECHA)
RETURN (select TIEMPO_ID from BI_D_TIEMPO
where
@ANIO = TIEMPO_ANIO AND
@CUATRIMESTRE = TIEMPO_CUATRIMESTRE AND
@MES = TIEMPO_MES
)
END
GO



CREATE PROCEDURE REINUS.BI_MIGRAR_RANGO_ETARIO
AS
BEGIN
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('<25')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('25-35')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('35-50')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('>50')
    INSERT INTO BI_D_RANGO_ETARIO(RANGO_ETARIO_DESCRIPCION)
    VALUES ('DESCONOCIDO')
END
GO



CREATE PROCEDURE REINUS.BI_MIGRAR_RANGO_HORARIO
AS
BEGIN
    INSERT INTO BI_D_RANGO_HORARIO(RANGO_HRAARIO_DESCRIPCION)
    VALUES ('00:00-06:00')
    INSERT INTO BI_D_RANGO_HORARIO(RANGO_HORARIO_DESCRIPCION)
    VALUES ('06:00-12:00')
    INSERT INTO BI_D_RANGO_HORARIO(RANGO_HORARIO_DESCRIPCION)
    VALUES ('12:00-18:00')
    INSERT INTO BI_D_RANGO_HORARIO(RANGO_HORARIO_DESCRIPCION)
    VALUES ('18:00-24:00')
   
END
GO

-- Migracion de TIPO ENVIO
CREATE PROCEDURE REINUS.BI_MIGRAR_TIPO_ENVIO
AS
BEGIN
    INSERT INTO BI_D_TIPO_ENVIO(TIPO)
        (select TIPO  from REINUS.Tipo_Envio)
END
GO
-- Migracion de MEDIO PAGO
CREATE PROCEDURE REINUS.BI_MIGRAR_MEDIO_PAGO
AS
BEGIN
    INSERT INTO BI_D_MEDIO_PAGO(MEDIO_PAGO, TIPO_MEDIO_PAGO)
        (select MEDIO_PAGO, TIPO_MEDIO_PAGO from REINUS.MedioPago)
END
GO
-- Migración RUBRO
CREATE PROCEDURE REINUS.BI_MIGRAR_RUBRO
AS
BEGIN
INSERT INTO BI_D_RUBRO (PRODUCTO_RUBRO_DESCRIPCION)
(SELECT PRODUCTO_RUBRO_DESCRIPCION   FROM REINUS.Rubro
GROUP BY PRODUCTO_RUBRO_DESCRIPCION )
END
GO
-- Migración SUBRUBRO
CREATE PROCEDURE REINUS.BI_MIGRAR_SUBRUBRO
AS
BEGIN
INSERT INTO BI_D_SUBRUBRO(PRODUCTO_SUB_RUBRO)
(SELECT  PRODUCTO_SUB_RUBRO FROM REINUS.Subrubro
GROUP BY  PRODUCTO_SUB_RUBRO)
END
GO


-------------------MIGRAR UBIACION
CREATE PROCEDURE REINUS.BI_MIGRAR_UBICACION
AS
BEGIN
    INSERT INTO BI_UBICACION(UBICACION_PROVINCIA, UBICACION_LOCALIDAD)
        (SELECT NOMBRE, NOMBRE
         FROM REINUS.Localidad
                  JOIN REINUS.Provincia P ON P.ID_PROVINCIA = Localidad.ID_PROVINCIA)
END
GO

-----------------------MIGRAR TIEMPO
CREATE PROCEDURE REINUS.BI_MIGRAR_TIEMPO
AS
BEGIN
    
    INSERT INTO BI_TIEMPO(TIEMPO_ANIO, TIEMPO_CUATRIMESTRE, TIEMPO_MES)
        (SELECT YEAR(FECHA_PROGRAMADA), DATEPART(QUARTER, FECHA_PROGRAMADA), MONTH(FECHA_PROGRAMADA)
         FROM REINUS.Envio
         GROUP BY YEAR(FECHA_PROGRAMADA), DATEPART(QUARTER, FECHA_PROGRAMADA), MONTH(FECHA_PROGRAMADA)
         UNION
         SELECT YEAR(FECHA), DATEPART(QUARTER, FECHA), MONTH(FECHA)
         FROM REINUS.Pago
         GROUP BY YEAR(FECHA), DATEPART(QUARTER, FECHA), MONTH(FECHA)
         UNION
		 SELECT YEAR(FECHA), DATEPART(QUARTER, FECHA), MONTH(FECHA)
         FROM REINUS.Factura
         GROUP BY YEAR(FECHA), DATEPART(QUARTER, FECHA), MONTH(FECHA)
		  UNION
		 SELECT YEAR(FECHA_HORA), DATEPART(QUARTER, FECHA_HORA), MONTH(FECHA_HORA)
         FROM REINUS.Venta
         GROUP BY YEAR(FECHA_HORA), DATEPART(QUARTER, FECHA_HORA), MONTH(FECHA_HORA)

END
GO



---------------------------MIGRAR MARCA-----------------------------

CREATE PROCEDURE REINUS.BI_MIGRAR_MARCA
AS
BEGIN
    INSERT INTO BI_MARCA(descripcion)
    SELECT DISTINCT descripcion FROM REINUS.Marca;
END
GO

---------------------------MIGRAR PUBLICACION------------
CREATE PROCEDURE REINUS.BI_MIGRA_PUBLICACION
AS
BEGIN
    INSERT INTO REINUS.BI_PUBLICACION (PUBLICACION_TIEMPO, PUBLICACION_SUBRUBRO, PUBLICACION_RUBRO)
    SELECT 
        T.ID_TIEMPO,          
        SR.ID_SUBRUBRO,       
        R.ID_RUBRO            
    FROM 
        REINUS.Publicacion p
    JOIN REINUS.Producto pro ON p.PRODUCTO_ID = pro.ID_PRODUCTO
    JOIN REINUS.BI_SUBRUBRO SR ON p.SUBRUBRO_ID = SR.ID_SUBRUBRO
    JOIN REINUS.BI_RUBRO R ON SR.RUBRO_ID = R.ID_RUBRO
    JOIN REINUS.BI_TIEMPO t ON t.TIEMPO_ANIO = YEAR(p.FECHA) 
                             AND t.TIEMPO_CUATRIMESTRE = DATEPART(QUARTER, p.FECHA)
                             AND t.TIEMPO_MES = MONTH(p.FECHA)
    GROUP BY 
        T.ID_TIEMPO, SR.ID_SUBRUBRO, R.ID_RUBRO;
END;
GO

CREATE PROCEDURE REINUS.BI_MIGRA_FACTURA
AS
BEGIN
    INSERT INTO REINUS.BI_FACTURA (FACTURA_TIEMPO, FACTURA_UBICACION, CONCEPTO)
    SELECT 
        T.ID_TIEMPO,          
        UB.ID_UBICACION,      
        p.CONCEPTO_ID       
    FROM 
        REINUS.Factura p
    JOIN REINUS.BI_TIEMPO t ON t.TIEMPO_ANIO = YEAR(p.FECHA)
                             AND t.TIEMPO_CUATRIMESTRE = DATEPART(QUARTER, p.FECHA)
                             AND t.TIEMPO_MES = MONTH(p.FECHA)
    JOIN REINUS.Usuario u ON p.USUARIO_ID = u.ID_USUARIO
    JOIN REINUS.Domicilio d ON d.USUARIO_ID = u.ID_USUARIO
    JOIN REINUS.Localidad L ON d.LOCALIDAD_ID = L.ID_LOCALIDAD
    JOIN REINUS.Provincia pro ON pro.ID_PROVINCIA = L.ID_PROVINCIA
    JOIN REINUS.BI_UBICACION UB ON UB.UBICACION_LOCALIDAD = L.NOMBRE 
                                  AND UB.UBICACION_PROVINCIA = pro.NOMBRE
    GROUP BY 
        T.ID_TIEMPO, UB.ID_UBICACION, p.CONCEPTO_ID;
END;
GO

---FALTA CONCEPTO


CREATE PROCEDURE REINUS.BI_MIGRAR_PAGOS
AS
BEGIN
INSERT INTO REINUS.BI_PAGO(  PAGO_UBIICACION,PAGO_TIEMPO, PAGO_TIPO_MEDIO_PAGO)
SELECT
UBICACION_ID
TIEMPO_ID
GO
FROM REINUS.Pago P
JOIN REINUS.Venta v on p.ID_VENTA = v.ID_VENTA
JOIN REINUS.Cliente c on c.ID_CLIENTE = v.CLIENTE_ID
JOIN REINUS.Usuario U on p.USUARIO_ID = c.ID_USUARIO
JOIN REINUS.Domicilio d on d.USUARIO_ID=u.ID_USUARIO
JOIN REINUS.Localidad L ON d.LOCALIDAD_ID = L.ID_LOCALIDAD
JOIN REINUS.Provincia pro ON pro.ID_PROVINCIA = L.ID_PROVINCIA
JOIN REINUS.BI_UBICACION ON UBICACION_LOCALIDAD = L.NOMBRE AND UBICACION_PROVINCIA = pro.NOMBRE
JOIN REINUS.BI_TIEMPO t ON t.TIEMPO_ANIO = year(p.FECHA) and TIEMPO_CUATRIMESTRE = DATEPART(Q, p.FECHA) and TIEMPO_MES = month(p.FECHA)
GROUP BY TIEMPO_ID

END
GO



-- Migración Ventas
CREATE PROCEDURE REINUS.BI_MIGRAR_VENTAS
AS
BEGIN
    INSERT INTO REINUS.BI_VENTAS(
        VENTA_RANGO_HORARIO,
        VENTA_TIPO_MEDIO_PAGO,
        VENT_RANGO_ETARIO_CLIENTE,
        VENTA_UBICACION,
        VENTA_TIEMPO,
        VENTA_RUBRO,
        VENTA_SUBRUBRO
    )
    SELECT 
        REINUS.CALCULAR_RANGO_HORARIO(VENTA.FECHA_HORA), 
        MEDIO_PAGO.TIPO_MEDIO_PAGO,                       
        REINUS.CALCULAR_RANGO_ETARIO(CLIENTE.FECHA_NAC),  
        UBICACION.UBI_ID,                                 
        TIEMPO.TIEMPO_ID,                                 -
        RUBRO.RUBRO_ID,                                   -
        SUBRUBRO.SUBRUBRO_ID                              -
    FROM
        REINUS.Venta VENTA
    JOIN REINUS.Cliente CLIENTE ON CLIENTE.ID_CLIENTE = VENTA.CLIENTE_ID  -- Relación con el cliente
    JOIN REINUS.Domicilio DOMICILIO ON DOMICILIO.USUARIO_ID = CLIENTE.ID_USUARIO
    JOIN REINUS.Localidad LOCALIDAD ON LOCALIDAD.ID_LOCALIDAD = DOMICILIO.LOCALIDAD_ID
    JOIN REINUS.Provincia PROVINCIA ON PROVINCIA.ID_PROVINCIA = LOCALIDAD.ID_PROVINCIA
    JOIN REINUS.BI_UBICACION UBICACION ON UBICACION.UBICACION_LOCALIDAD = LOCALIDAD.NOMBRE 
                                        AND UBICACION.UBICACION_PROVINCIA = PROVINCIA.NOMBRE
    JOIN REINUS.BI_TIEMPO TIEMPO ON TIEMPO.TIEMPO_ANIO = YEAR(VENTA.FECHA_HORA) 
                                  AND TIEMPO.TIEMPO_CUATRIMESTRE = DATEPART(Q, VENTA.FECHA_HORA)
                                  AND TIEMPO.TIEMPO_MES = MONTH(VENTA.FECHA_HORA)
    JOIN REINUS.Detalle_Venta DETALLE_VENTA ON DETALLE_VENTA.VENTA_ID = VENTA.ID_VENTA
    JOIN REINUS.Publicacion PUBLICACION ON PUBLICACION.ID_PUBLICACION = DETALLE_VENTA.PUBLICACION_ID
    JOIN REINUS.Rubro RUBRO ON RUBRO.ID_RUBRO = PUBLICACION.PRODUCTO_ID  
    JOIN REINUS.Subrubro SUBRUBRO ON SUBRUBRO.ID_SUBRUBRO = RUBRO.ID_RUBRO 
    LEFT JOIN REINUS.Pago PAGO ON PAGO.VENTA_ID = VENTA.ID_VENTA  --
    LEFT JOIN REINUS.MedioPago MEDIO_PAGO ON MEDIO_PAGO.ID_MEDIO_PAGO = PAGO.MEDIO_PAGO_ID
    GROUP BY 
        REINUS.CALCULAR_RANGO_HORARIO(VENTA.FECHA_HORA),
        MEDIO_PAGO.TIPO_MEDIO_PAGO,
        REINUS.CALCULAR_RANGO_ETARIO(CLIENTE.FECHA_NAC),
        UBICACION.UBI_ID,
        TIEMPO.TIEMPO_ID,
        RUBRO.RUBRO_ID,
        SUBRUBRO.SUBRUBRO_ID;
END;
GO

GO

---------------------------------------- Creacion de vistas ----------------------------------------


 /* Ejercicio 1Promedio de tiempo de publicaciones. Tiempo promedio que se encuentra
vigente una publicación según el subRubro asociado a los productos de la misma
para cada cuatrimestres de cada año. Se calcula en función de la diferencia entre
la fecha de inicio y fin. Se toma en cuenta la fecha de inici*/

 CREATE VIEW REINUS.VIEW_1 AS
SELECT
    S.PRODUCTO_SUB_RUBRO AS subrubro,
    t.TIEMPO_ANIO AS anio,
    t.TIEMPO_CUATRIMESTRE AS cuatrimestre,
    AVG(DATEDIFF(day, pub.FECHA_INICIO, pub.FECHA_FIN)) AS tiempo_promedio
FROM
    REINUS.BI_PUBLICACION pub
    JOIN REINUS.BI_SUBRUBRO s ON pub.PUBLICACION_SUBRUBRO = s.ID_SUBRUBRO
    JOIN REINUS.BI_TIEMPO t ON pub.PUBLICACION_TIEMPO = t.ID_TIEMPO
GROUP BY
    s.PRODUCTO_SUB_RUBRO, t.TIEMPO_ANIO, t.TIEMPO_CUATRIMESTRE;
GO
/*
2. Promedio de Stock Inicial. Cantidad de stock promedio con que se dan de alta
las publicaciones según la Marca de los productos publicados por año.*/

CREATE VIEW REINUS.VIEW_2 AS
SELECT
       m.DESCRIPCION AS marca,
    YEAR(pub.FECHA_INICIO) AS anio,
    AVG(pub.STOCK_INICIAL) AS promedio_stock_inicial
FROM
    REINUS.BI_PUBLICACION pub
    JOIN REINUS.BI_MARCA m ON pub.PUBLICACION_RUBRO = m.ID_MARCA
GROUP BY
    m.DESCRIPCION, YEAR(pub.FECHA_INICIO);
GO

/*Ejercicio 3Venta promedio mensual. Valor promedio de las ventas (en $) según la
provincia correspondiente a la ubicación del almacén para cada mes de cada año
Se calcula en función de la sumatoria del importe de las ventas sobre el total de
las mismas.*/
CREATE VIEW REINUS.VIEW_3 AS
SELECT
    t.TIEMPO_ANIO AS anio,
    t.TIEMPO_MES AS mes,
    u.UBICACION_PROVINCIA AS provincia,
    AVG(v.VENT_MONTO) AS venta_promedio_mensual
FROM
    REINUS.BI_VENTA v
    JOIN REINUS.BI_UBICACION u ON v.VENTA_UBICACION = u.ID_UBICACION
    JOIN REINUS.BI_TIEMPO t ON v.VENTA_TIEMPO = t.ID_TIEMPO
GROUP BY
    t.TIEMPO_ANIO, t.TIEMPO_MES, u.UBICACION_PROVINCIA;
GO

/**/
/* Ejericico 4Rendimiento de rubros. Los 5 rubros con mayores ventas para cada
cuatrimestre de cada año según la localidad y rango etario de los clientes*/
CREATE VIEW REINUS.VIEW_4 AS
SELECT 
    T.TIEMPO_ANIO AS año,
    T.TIEMPO_CUATRIMESTRE AS cuatrimestre,
    U.UBICACION_LOCALIDAD AS localidad,
    RANGO.RANGO_ETARIO_DESCRIPCION AS rango_etario,
    R.PRODUCTO_RUBRO_DESCRIPCION AS rubro,
    total_ventas
FROM 
    (
        SELECT 
            V.VENTA_TIEMPO,
            V.VENTA_UBICACION,
            V.VENTA_RANGO_ETARIO_CLIENTE,
            V.VENTA_RUBRO,
            SUM(V.VENT_MONTO) AS total_ventas,
            ROW_NUMBER() OVER (
                PARTITION BY 
                    T.TIEMPO_ANIO, 
                    T.TIEMPO_CUATRIMESTRE, 
                    U.UBICACION_LOCALIDAD, 
                    RANGO.RANGO_ETARIO_DESCRIPCION 
                ORDER BY 
                    SUM(V.VENT_MONTO) DESC
            ) AS row_num
        FROM 
            REINUS.BI_VENTA V
        JOIN 
            REINUS.BI_TIEMPO T ON V.VENTA_TIEMPO = T.ID_TIEMPO
        JOIN 
            REINUS.BI_UBICACION U ON V.VENTA_UBICACION = U.ID_UBICACION
        JOIN 
            REINUS.BI_RANGO_ETARIO RANGO ON V.VENTA_RANGO_ETARIO_CLIENTE = RANGO.ID_RANGO_ETARIO
        JOIN 
            REINUS.BI_RUBRO R ON V.VENTA_RUBRO = R.ID_RUBRO
        GROUP BY 
            T.TIEMPO_ANIO, 
            T.TIEMPO_CUATRIMESTRE, 
            U.UBICACION_LOCALIDAD, 
            RANGO.RANGO_ETARIO_DESCRIPCION, 
            R.PRODUCTO_RUBRO_DESCRIPCION
    ) AS  consulta
WHERE 
    consulta.row_num <= 5
GO

/*Ejercicio 5*/
 --Cantidad de ventas registradas por rango horario según el mes de
--cada año.

CREATE VIEW REINUS.VIEW_5 AS
SELECT BI.RANGO_HORARIO_DESCRIPCION,
       TIEMPO_ANIO,
       TIEMPO_MES,
       SUM(VENT_CANTIDAD_VENTAS) AS CANTIDAD_VENTAS
FROM REINUS.BI_VENTA B
         JOIN REINUS.BI_TIEMPO T ON T.ID_TIEMPO = B.VENTA_TIEMPO
         JOIN REINUS.BI_RANGO_HORARIO BI ON BI.ID_RANGO_HORARIO = B.VENTA_RANGO_HORARIO
GROUP BY  BI.RANGO_HORARIO_DESCRIPCION , TIEMPO_ANIO, TIEMPO_MES
GO

/*Ejercicio 6
Pago en Cuotas. Las 3 localidades con el mayor importe de pagos en cuotas,
según el medio de pago, mes y año. Se calcula sumando los importes totales de
todas las ventas en cuotas. Se toma la localidad del cliente (Si tiene más de una
dirección se toma a la que seleccionó el envío)*/
C-- Vista para Pago en Cuotas
CREATE VIEW REINUS.VIEW_6 AS
SELECT TOP 3 
    U.UBICACION_LOCALIDAD,
    SUM(B.PAGO_TOTAL) AS IMPORTE_TOTAL_DE_CUOTAS,
    M.TIPO_MEDIO_PAGO,
    T.TIEMPO_MES,
    T.TIEMPO_ANIO
FROM REINUS.BI_PAGO B
JOIN REINUS.BI_TIEMPO T ON T.TIEMPO_ID = B.PAGO_TIEMPO
JOIN REINUS.BI_TIPO_MEDIO_PAGO M ON M.ID_TIPO_MEDIO_PAGO = B.PAGO_TIPO_MEDIO_PAGO
JOIN REINUS.BI_UBICACION U ON U.ID_UBICACION = B.UBICACION_ID
WHERE B.PAGO_CUOTAS > 0
GROUP BY U.UBICACION_LOCALIDAD, M.TIPO_MEDIO_PAGO, T.TIEMPO_MES, T.TIEMPO_ANIO
ORDER BY IMPORTE_TOTAL_DE_CUOTAS DESC;
GO


/*7-- 
Porcentaje de cumplimiento de envíos en los tiempos programados por
provincia (del almacén) por año/mes (desvío). Se calcula teniendo en cuenta los
envíos cumplidos sobre el total de envíos para el período.*/
CREATE VIEW REINUS.VIEW_CUMPLIMIENTO_ENVIO AS
SELECT 
    U.UBICACION_PROVINCIA AS provincia,
    T.TIEMPO_ANIO AS año,
    T.TIEMPO_MES AS mes,
    (
        (
            SELECT COUNT(*) 
            FROM REINUS.BI_ENVIO E2
            JOIN REINUS.BI_TIEMPO T2 
                ON E2.ENVIO_TIEMPO = T2.ID_TIEMPO
            WHERE 
                T2.TIEMPO_ANIO = T.TIEMPO_ANIO
                AND T2.TIEMPO_MES = T.TIEMPO_MES
                AND U.ID_UBICACION = E2.ENVIO_UBICACION
                AND E2.ENTREGADO = 1
        ) * 100.0 / COUNT(E1.ID_ENVIO)
    ) AS porcentaje_cumplimiento
FROM 
    REINUS.BI_ENVIO E1
JOIN 
    REINUS.BI_UBICACION U 
    ON E1.ENVIO_UBICACION = U.ID_UBICACION
JOIN 
    REINUS.BI_TIEMPO T 
    ON E1.ENVIO_TIEMPO = T.ID_TIEMPO
GROUP BY 
    U.UBICACION_PROVINCIA, 
    T.TIEMPO_ANIO, 
    T.TIEMPO_MES, 
    U.ID_UBICACION;
GO


--8--
 /*Localidades que pagan mayor costo de envío. Las 5 localidades (tomando la
localidad del cliente) con mayor costo de env*/

CREATE VIEW REINUS.VIEW_8 AS
SELECT TOP 5 UBI.UBI_LOCALIDAD
E.ENV_COSTO
FROM REINUS.BI_ENVIO E
JOIN REINUS.BI_UBICACION UBI ON E.ENV_UBICACION = UBI.UBI_ID
ORDER BY E.ENV_COSTO desc
GO 

/*
Ejercicio 9
Porcentaje de facturación por concepto para cada mes de cada año. Se calcula
en función del total del concepto sobre el total del período.*/
-- Vista para Porcentaje de Facturación por Concepto
CREATE VIEW REINUS.VIEW_9 AS
SELECT 
    T.TIEMPO_ANIO AS ANIO,
    T.TIEMPO_MES AS MES,
    C.TIPO AS CONCEPTO,
    SUM(F.TOTAL_FACTURADO) AS TOTAL_FACTURADO_CONCEPTO,
    (SUM(F.TOTAL_FACTURADO) * 100.0 / SUM(SUM(F.TOTAL_FACTURADO)) 
        OVER (PARTITION BY T.TIEMPO_ANIO, T.TIEMPO_MES)) AS PORCENTAJE_FACTURACION
FROM REINUS.BI_HECHOS_FACTURACION F
JOIN REINUS.BI_D_TIEMPO T ON F.TIEMPO_ID = T.TIEMPO_ID
JOIN REINUS.BI_D_CONCEPTO C ON F.CONCEPTO_ID = C.CONCEPTO_ID
GROUP BY T.TIEMPO_ANIO, T.TIEMPO_MES, C.TIPO;
GO


/*
Ejercicio 10Facturación por provincia. Monto facturado según la provincia del vendedor
para cada cuatrimestre de cada año*/

CREATE VIEW REINUS.VIEW_10 AS
SELECT 
    U.UBICACION_PROVINCIA AS PROVINCIA,
    T.TIEMPO_ANIO AS ANIO,
    T.TIEMPO_CUATRIMESTRE AS CUATRIMESTRE,
    SUM(F.TOTAL_FACTURADO) AS MONTO_FACTURADO
FROM REINUS.BI_FACTURACION F
JOIN REINUS.BI_UBICACION U ON F.UBICACION_ID = U.UBICACION_ID
JOIN REINUS.BI_TIEMPO T ON F.TIEMPO_ID = T.TIEMPO_ID
GROUP BY U.UBICACION_PROVINCIA, T.TIEMPO_ANIO, T.TIEMPO_CUATRIMESTRE;
GO

